   1              	# 1 "../common/44binit.asm"
   1              	# *******************************************************
   0              	
   0              	
   0              	
   2              	# * NAME    : 44BINIT.S									*
   3              	# * Version : 10.April.2000								*
   4              	# * Description:										*
   5              	# *	C start up codes									*
   6              	# *	Configure memory, Initialize ISR ,stacks			*
   7              	# *	Initialize C-variables								*
   8              	# *	Fill zeros into zero-initialized C-variables		*
   9              	# *******************************************************
  10              	
  11              	    .include "option.a"
   1              	/*********************************************************************************************
   2              	* File£º	option.a
   3              	* Author:	embest	
   4              	* Desc£º	S3CEV40 option parameter
   5              	* History:	
   6              	*********************************************************************************************/
   7              	
   8              	#**********OPTIONS*******************************
   9              	.equ 	_ISR_STARTADDRESS,	0xc7fff00		/* GCS6:64M DRAM/SDRAM 	*/
  10              	
  11              	#BUSWIDTH; 16,32
  12              	    	.global		BUSWIDTH
  13              	.equ 	BUSWIDTH,	16
  14              	
  15              	    	.data
  16              	    	.global		BDRAMTYPE
  17 0000 53445241 	BDRAMTYPE:	.string		"SDRAM"
  17      4D00
  18              	
  19              	#This value has to be TRUE on ROM program.
  20              	#This value has to be FALSE in RAM program.
  21              	    	.global    	PLLONSTART
  22              	.equ	PLLONSTART, 	1
  23              	
  24              			.global 	PLLCLK
  25              	.equ 	PLLCLK,		64000000
  26              	
  27              			.ifeq PLLCLK-64000000	
  28              	.equ 	M_DIV,		56		/* Fin=8MHz Fout=64MHz */
  29              	.equ 	P_DIV,		2
  30              	.equ 	S_DIV,		1
  31              			.endif
  32              	
  33              	#************************************************
  34              	
  12              	    .include "memcfg.a"
   1              	/*********************************************************************************************
   2              	* File£º	memcfg.a
   3              	* Author:	embest	
   4              	* Desc£º	S3CEV40 memory bank config parameter
   5              	* History:	
   6              	*********************************************************************************************/
   7              	
   8              	#**********MEMORY CONTROL PARAMETERS*******************************
   9              	
  10              	#Bank 0 parameter
  11              	.equ 	B0_Tacs		,0x0	/* 0clk              */                     
  12              	.equ 	B0_Tcos		,0x0    /* 0clk              */                     
  13              	.equ 	B0_Tacc		,0x6    /* 10clk             */                     
  14              	.equ 	B0_Tcoh		,0x0    /* 0clk              */                     
  15              	.equ 	B0_Tah		,0x0    /* 0clk              */                     
  16              	.equ 	B0_Tacp		,0x0    /* 0clk              */                     
  17              	.equ 	B0_PMC		,0x0    /* normal(1data)     */                     
  18              	                                                                
  19              	#Bank 1 parameter                                               
  20              	.equ 	B1_Tacs		,0x3    /* 4clk              */                    
  21              	.equ 	B1_Tcos		,0x3    /* 4clk              */                    
  22              	.equ 	B1_Tacc		,0x7    /* 14clk             */                    
  23              	.equ 	B1_Tcoh		,0x3    /* 4clk              */                    
  24              	.equ 	B1_Tah		,0x3    /* 4clk              */                    
  25              	.equ 	B1_Tacp		,0x3    /* 6clk              */                    
  26              	.equ 	B1_PMC		,0x0    /* normal(1data)     */                    
  27              	                                                                
  28              	#Bank 2 parameter                                               
  29              	.equ 	B2_Tacs		,0x3    /* 4clk              */                     
  30              	.equ 	B2_Tcos		,0x3    /* 4clk              */                     
  31              	.equ 	B2_Tacc		,0x7    /* 14clk             */                     
  32              	.equ 	B2_Tcoh		,0x3    /* 4clk              */                     
  33              	.equ 	B2_Tah		,0x3    /* 4clk              */                     
  34              	.equ 	B2_Tacp		,0x3    /* 6clk              */                     
  35              	.equ 	B2_PMC		,0x0    /* normal(1data)     */                     
  36              	                                                                
  37              	#Bank 3 parameter                                               
  38              	.equ 	B3_Tacs		,0x3    /* 4clk              */                     
  39              	.equ 	B3_Tcos		,0x3    /* 4clk              */                     
  40              	.equ 	B3_Tacc		,0x7    /* 14clk             */                     
  41              	.equ 	B3_Tcoh		,0x3    /* 4clk              */                     
  42              	.equ 	B3_Tah		,0x3    /* 4clk              */                     
  43              	.equ 	B3_Tacp		,0x3    /* 6clk              */                     
  44              	.equ 	B3_PMC		,0x0    /* normal(1data)     */                     
  45              	                                                                
  46              	#Bank 4 parameter                                               
  47              	.equ 	B4_Tacs		,0x3    /* 4clk              */                     
  48              	.equ 	B4_Tcos		,0x3    /* 4clk              */                     
  49              	.equ 	B4_Tacc		,0x7    /* 14clk             */                     
  50              	.equ 	B4_Tcoh		,0x3    /* 4clk              */                     
  51              	.equ 	B4_Tah		,0x3    /* 4clk              */                     
  52              	.equ 	B4_Tacp		,0x3    /* 6clk              */                     
  53              	.equ 	B4_PMC		,0x0    /* normal(1data)     */                     
  54              	                                                                
  55              	#Bank 5 parameter                                               
  56              	.equ 	B5_Tacs		,0x3    /* 4clk              */                     
  57              	.equ 	B5_Tcos		,0x3    /* 4clk              */                     
  58              	.equ 	B5_Tacc		,0x7    /* 14clk             */                     
  59              	.equ 	B5_Tcoh		,0x3    /* 4clk              */                     
  60              	.equ 	B5_Tah		,0x3    /* 4clk              */                     
  61              	.equ 	B5_Tacp		,0x3    /* 6clk              */                     
  62              	.equ 	B5_PMC		,0x0    /* normal(1data)     */                     
  63              	                                                                
  64              	#Bank 6(if SROM) parameter
  65              	.equ 	B6_Tacs		,0x3    /* 4clk              */                     
  66              	.equ 	B6_Tcos		,0x3    /* 4clk              */                     
  67              	.equ 	B6_Tacc		,0x7    /* 14clk             */                     
  68              	.equ 	B6_Tcoh		,0x3    /* 4clk              */                     
  69              	.equ 	B6_Tah		,0x3    /* 4clk              */                     
  70              	.equ 	B6_Tacp		,0x3    /* 6clk              */                     
  71              	.equ 	B6_PMC		,0x0    /* normal(1data)     */                     
  72              	                                                                
  73              	#Bank 7(if SROM) parameter
  74              	.equ 	B7_Tacs		,0x3    /* 4clk              */                     
  75              	.equ 	B7_Tcos		,0x3    /* 4clk              */                     
  76              	.equ 	B7_Tacc		,0x7    /* 14clk             */                     
  77              	.equ 	B7_Tcoh		,0x3    /* 4clk              */                     
  78              	.equ 	B7_Tah		,0x3    /* 4clk              */                     
  79              	.equ 	B7_Tacp		,0x3    /* 6clk              */                     
  80              	.equ 	B7_PMC		,0x0    /* normal(1data)     */                     
  81              	                                                                
  82              	#;Bank 6 parameter                                              
  83              		.ifc BDRAMTYPE, "DRAM"	/* MT=01(FP DRAM) or 10(EDO DRAM)  */       
  84              	.equ 	B6_MT		,0x2    /* EDO DRAM                        */       
  85              	.equ 	B6_Trcd		,0x0    /* 1clk                            */       
  86              	.equ 	B6_Tcas		,0x0    /* 1clk                            */       
  87              	.equ 	B6_Tcp		,0x0    /* 1clk                            */       
  88              	.equ 	B6_CAN		,0x2    /* 10bit                           */       
  89              		.else	         		/* MT=11(SDRAM)                    */       
  90              	.equ 	B6_MT		,0x3    /* SDRAM                           */       
  91              	.equ 	B6_Trcd		,0x0    /* 2clk                            */       
  92              	.equ 	B6_SCAN		,0x0    /* 8bit                            */       
  93              		.endif                                                  
  94              	                                                                
  95              	#Bank 7 parameter                                               
  96              	 	.ifc BDRAMTYPE, "DRAM"	/* MT=01(FP DRAM) or 10(EDO DRAM)  */       
  97              	.equ 	B7_MT		,0x2    /* EDO DRAM                        */       
  98              	.equ 	B7_Trcd		,0x0    /* 2clk                            */       
  99              	.equ 	B7_Tcas		,0x0    /* 2clk                            */       
 100              	.equ 	B7_Tcp		,0x0    /* 2clk                            */       
 101              	.equ 	B7_CAN		,0x2    /* 10bit                           */       
 102              		.else	         		/* MT=11(SDRAM)                    */       
 103              	.equ 	B7_MT		,0x3    /* SDRAM                           */       
 104              	.equ 	B7_Trcd		,0x0    /* 2clk                            */       
 105              	.equ 	B7_SCAN		,0x0    /* 8bit                            */       
 106              		.endif                                                  
 107              	                                                                
 108              	#REFRESH parameter                                              
 109              	.equ 	REFEN		,0x1    /* Refresh enable                   */      
 110              	.equ 	TREFMD		,0x0    /* CBR(CAS before RAS)/Auto refresh */      
 111              	.equ 	Trp			,0x0    /* 2clk                           	*/
 112              	.equ 	Trc			,0x1    /* 5clk                           	*/
 113              	.equ 	Tchr		,0x2    /* 3clk                             */      
 114              	.equ 	REFCNT		,1113   /* period=15.6us, MCLK=60Mhz        */      
 115              	#************************************************
  13              	
  14              	#Memory Area
  15              	#GCS6    8M 16bit(8MB) DRAM/SDRAM(0xc000000-0xc7fffff)
  16              	#APP     RAM=0xc000000~0xc7effff 
  17              	#EV_boot RAM=0xc7f0000-0xc7ff000 // if EV_boot
  18              	#STACK	 =0xc7ffa00
  19              	
  20              	#Interrupt Control
  21              	.equ 	INTPND,		0x01e00004
  22              	.equ 	INTMOD,		0x01e00008
  23              	.equ 	INTMSK,		0x01e0000c
  24              	.equ 	I_ISPR,		0x01e00020
  25              	.equ 	I_CMST,		0x01e0001c
  26              	
  27              	#Watchdog timer
  28              	.equ 	WTCON,		0x01d30000
  29              	
  30              	#Clock Controller
  31              	.equ 	PLLCON,		0x01d80000
  32              	.equ 	CLKCON,		0x01d80004
  33              	.equ 	LOCKTIME,	0x01d8000c
  34              		
  35              	#Memory Controller
  36              	.equ 	REFRESH,	0x01c80024
  37              	
  38              	#BDMA destination register
  39              	.equ 	BDIDES0,	0x1f80008
  40              	.equ 	BDIDES1,	0x1f80028
  41              	
  42              	#Pre-defined constants
  43              	.equ 	USERMODE,	0x10
  44              	.equ 	FIQMODE,	0x11
  45              	.equ 	IRQMODE,	0x12
  46              	.equ 	SVCMODE,	0x13
  47              	.equ 	ABORTMODE,	0x17
  48              	.equ 	UNDEFMODE,	0x1b
  49              	.equ 	MODEMASK,	0x1f
  50              	.equ 	NOINT,		0xc0
  51              	.equ    IRQ_MODE,	0x40       /* disable Interrupt Mode (IRQ) */
  52              	.equ    FIQ_MODE,	0x80       /* disable Fast Interrupt Mode (FIQ) */
  53              	
  54              	.macro HANDLER HandleLabel
  55              	    sub	    sp,sp,#4	    /* decrement sp(to store jump address) */							
  56              	    stmfd   sp!,{r0}	    /* PUSH the work register to stack(lr does't push because it return to ori
  57              	    ldr	    r0,=\HandleLabel/* load the address of HandleXXX to r0 */
  58              	    ldr	    r0,[r0]	    	/* load the contents(service routine start address) of HandleXXX */
  59              	    str	    r0,[sp,#4]	    /* store the contents(ISR) of HandleXXX to stack */
  60              	    ldmfd   sp!,{r0,pc}	    /* POP the work register and pc(jump to ISR) */
  61              	.endm
  62              	
  63              	    .extern       Image_RO_Limit    /* End of ROM code (=start of ROM data) */
  64              	    .extern       Image_RW_Base     /* Base of RAM to initialise */           
  65              	    .extern       Image_ZI_Base     /* Base and limit of area */              
  66              	    .extern       Image_ZI_Limit    /* to zero initialise */       
  67              	
  68              	    .extern Main			/* The main entry of mon program */
  69              	    .extern push_debug
  70              	    .extern parpadeos
  71              	    
  72              	    .text
  73              	
  74              	    ENTRY:
  75 0000 0D0100EA 	    b ResetHandler			/* for debug            */
  76 0004 420000EA 	    b HandlerUndef      	/* handlerUndef         */
  77 0008 470000EA 	    b HandlerSWI        	/* SWI interrupt handler*/
  78 000c 520000EA 	    b HandlerPabort     	/* handlerPAbort        */
  79 0010 4B0000EA 	    b HandlerDabort     	/* handlerDAbort        */
  80 0014 FEFFFFEA 	    b .                 	/* handlerReserved      */
  81 0018 370000EA 	    b HandlerIRQ
  82 001c 300000EA 	    b HandlerFIQ
  83              		#***IMPORTANT NOTE***
  84              		#If the H/W vectored interrutp mode is enabled, The above two instructions should
  85              		#be changed like below, to work-around with H/W bug of S3C44B0X interrupt controller. 
  86              		# b HandlerIRQ  ->  subs pc,lr,#4
  87              		# b HandlerIRQ  ->  subs pc,lr,#4
  88              	
  89              	VECTOR_BRANCH:
  90 0020 14F69FE5 	    ldr pc,=HandlerEINT0    /*mGA    H/W interrupt vector table  */
  91 0024 14F69FE5 	    ldr pc,=HandlerEINT1    /*	                                 */	
  92 0028 14F69FE5 	    ldr pc,=HandlerEINT2    /*                                   */  
  93 002c 14F69FE5 	    ldr pc,=HandlerEINT3    /*                                   */  
  94 0030 14F69FE5 	    ldr pc,=HandlerEINT4567 /*                                   */  
  95 0034 14F69FE5 	    ldr pc,=HandlerTICK	    /*mGA                                */   
  96 0038 FEFFFFEA 	    b .                                                          
  97 003c FEFFFFEA 	    b .                                                         
  98 0040 0CF69FE5 	    ldr pc,=HandlerZDMA0    /*mGB                                */  
  99 0044 0CF69FE5 	    ldr pc,=HandlerZDMA1    /*                                   */  
 100 0048 0CF69FE5 	    ldr pc,=HandlerBDMA0    /*                                   */  
 101 004c 0CF69FE5 	    ldr pc,=HandlerBDMA1    /*                                   */  
 102 0050 0CF69FE5 	    ldr pc,=HandlerWDT	    /*                                   */   
 103 0054 0CF69FE5 	    ldr pc,=HandlerUERR01   /*mGB                                */  
 104 0058 FEFFFFEA 	    b .                                                          
 105 005c FEFFFFEA 	    b .                                                          
 106 0060 04F69FE5 	    ldr pc,=HandlerTIMER0   /*mGC                                */  
 107 0064 04F69FE5 	    ldr pc,=HandlerTIMER1   /*                                   */  
 108 0068 04F69FE5 	    ldr pc,=HandlerTIMER2   /*                                   */  
 109 006c 04F69FE5 	    ldr pc,=HandlerTIMER3   /*                                   */  
 110 0070 04F69FE5 	    ldr pc,=HandlerTIMER4   /*                                   */  
 111 0074 04F69FE5 	    ldr pc,=HandlerTIMER5   /*mGC                                */  
 112 0078 FEFFFFEA 	    b .                                                          
 113 007c FEFFFFEA 	    b .                                                          
 114 0080 FCF59FE5 	    ldr pc,=HandlerURXD0    /*mGD                                */  
 115 0084 FCF59FE5 	    ldr pc,=HandlerURXD1    /*                                   */  
 116 0088 FCF59FE5 	    ldr pc,=HandlerIIC	    /*                                   */   
 117 008c FCF59FE5 	    ldr pc,=HandlerSIO	    /*                                   */   
 118 0090 FCF59FE5 	    ldr pc,=HandlerUTXD0    /*                                   */  
 119 0094 FCF59FE5 	    ldr pc,=HandlerUTXD1    /*mGD                                */  
 120 0098 FEFFFFEA 	    b .                                                          
 121 009c FEFFFFEA 	    b .                                                          
 122 00a0 F4F59FE5 	    ldr pc,=HandlerRTC	    /*mGKA                               */   
 123 00a4 FEFFFFEA 	    b .					    /*                     		         */
 124 00a8 FEFFFFEA 	    b .					    /*                     		         */
 125 00ac FEFFFFEA 	    b .					    /*                     		         */
 126 00b0 FEFFFFEA 	    b .					    /*                     		         */
 127 00b4 FEFFFFEA 	    b .					    /*mGKA                 			     */
 128 00b8 FEFFFFEA 	    b .                                                          
 129 00bc FEFFFFEA 	    b .                                                          
 130 00c0 D8F59FE5 	    ldr pc,=HandlerADC	    /*mGKB                               */  
 131 00c4 FEFFFFEA 	    b .					    /*                     		         */
 132 00c8 FEFFFFEA 	    b .					    /*                     		         */
 133 00cc FEFFFFEA 	    b .					    /*                     		         */
 134 00d0 FEFFFFEA 	    b .					    /*                     		         */
 135 00d4 FEFFFFEA 	    b .					    /*mGKB                 		         */
 136 00d8 FEFFFFEA 	    b .                                                          
 137 00dc FEFFFFEA 	    b .                                                          
 138              	@0xe0=EnterPWDN                                                 
 139 00e0 BCF59FE5 	    ldr pc,=EnterPWDN
 140              	
 141              	@   .ltorg
 142              	          	/* the current contents of the literal pool\
 143              	               to be dumped into the current section\ 
 144              	               (which is assumed to be the .text section)\ 
 145              	               at the current location (aligned to a word boundary).*/
 146              	   .align
 147              	
 148 00e4 04D04DE2 	HandlerFIQ:		HANDLER HandleFIQ
 148      04002DE5 
 148      B4059FE5 
 148      000090E5 
 148      04008DE5 
 149 00fc 04D04DE2 	HandlerIRQ:		HANDLER HandleIRQ
 149      04002DE5 
 149      A0059FE5 
 149      000090E5 
 149      04008DE5 
 150 0114 04D04DE2 	HandlerUndef:	HANDLER HandleUndef
 150      04002DE5 
 150      8C059FE5 
 150      000090E5 
 150      04008DE5 
 151 012c 04D04DE2 	HandlerSWI:		HANDLER HandleSWI
 151      04002DE5 
 151      78059FE5 
 151      000090E5 
 151      04008DE5 
 152 0144 04D04DE2 	HandlerDabort:	HANDLER HandleDabort
 152      04002DE5 
 152      64059FE5 
 152      000090E5 
 152      04008DE5 
 153 015c 04D04DE2 	HandlerPabort:	HANDLER HandlePabort
 153      04002DE5 
 153      50059FE5 
 153      000090E5 
 153      04008DE5 
 154 0174 04D04DE2 	HandlerADC:		HANDLER HandleADC
 154      04002DE5 
 154      3C059FE5 
 154      000090E5 
 154      04008DE5 
 155 018c 04D04DE2 	HandlerRTC:		HANDLER HandleRTC
 155      04002DE5 
 155      28059FE5 
 155      000090E5 
 155      04008DE5 
 156 01a4 04D04DE2 	HandlerUTXD1:	HANDLER HandleUTXD1
 156      04002DE5 
 156      14059FE5 
 156      000090E5 
 156      04008DE5 
 157 01bc 04D04DE2 	HandlerUTXD0:	HANDLER HandleUTXD0
 157      04002DE5 
 157      00059FE5 
 157      000090E5 
 157      04008DE5 
 158 01d4 04D04DE2 	HandlerSIO:		HANDLER HandleSIO
 158      04002DE5 
 158      EC049FE5 
 158      000090E5 
 158      04008DE5 
 159 01ec 04D04DE2 	HandlerIIC:		HANDLER HandleIIC
 159      04002DE5 
 159      D8049FE5 
 159      000090E5 
 159      04008DE5 
 160 0204 04D04DE2 	HandlerURXD1:	HANDLER HandleURXD1
 160      04002DE5 
 160      C4049FE5 
 160      000090E5 
 160      04008DE5 
 161 021c 04D04DE2 	HandlerURXD0:	HANDLER HandleURXD0
 161      04002DE5 
 161      B0049FE5 
 161      000090E5 
 161      04008DE5 
 162 0234 04D04DE2 	HandlerTIMER5:	HANDLER HandleTIMER5
 162      04002DE5 
 162      9C049FE5 
 162      000090E5 
 162      04008DE5 
 163 024c 04D04DE2 	HandlerTIMER4:	HANDLER HandleTIMER4
 163      04002DE5 
 163      88049FE5 
 163      000090E5 
 163      04008DE5 
 164 0264 04D04DE2 	HandlerTIMER3:	HANDLER HandleTIMER3
 164      04002DE5 
 164      74049FE5 
 164      000090E5 
 164      04008DE5 
 165 027c 04D04DE2 	HandlerTIMER2:	HANDLER HandleTIMER2
 165      04002DE5 
 165      60049FE5 
 165      000090E5 
 165      04008DE5 
 166 0294 04D04DE2 	HandlerTIMER1:	HANDLER HandleTIMER1
 166      04002DE5 
 166      4C049FE5 
 166      000090E5 
 166      04008DE5 
 167 02ac 04D04DE2 	HandlerTIMER0:	HANDLER HandleTIMER0
 167      04002DE5 
 167      38049FE5 
 167      000090E5 
 167      04008DE5 
 168 02c4 04D04DE2 	HandlerUERR01:	HANDLER HandleUERR01
 168      04002DE5 
 168      24049FE5 
 168      000090E5 
 168      04008DE5 
 169 02dc 04D04DE2 	HandlerWDT:		HANDLER HandleWDT
 169      04002DE5 
 169      10049FE5 
 169      000090E5 
 169      04008DE5 
 170 02f4 04D04DE2 	HandlerBDMA1:	HANDLER HandleBDMA1
 170      04002DE5 
 170      FC039FE5 
 170      000090E5 
 170      04008DE5 
 171 030c 04D04DE2 	HandlerBDMA0:	HANDLER HandleBDMA0
 171      04002DE5 
 171      E8039FE5 
 171      000090E5 
 171      04008DE5 
 172 0324 04D04DE2 	HandlerZDMA1:	HANDLER HandleZDMA1
 172      04002DE5 
 172      D4039FE5 
 172      000090E5 
 172      04008DE5 
 173 033c 04D04DE2 	HandlerZDMA0:	HANDLER HandleZDMA0
 173      04002DE5 
 173      C0039FE5 
 173      000090E5 
 173      04008DE5 
 174 0354 04D04DE2 	HandlerTICK:	HANDLER HandleTICK
 174      04002DE5 
 174      AC039FE5 
 174      000090E5 
 174      04008DE5 
 175 036c 04D04DE2 	HandlerEINT4567:HANDLER HandleEINT4567
 175      04002DE5 
 175      98039FE5 
 175      000090E5 
 175      04008DE5 
 176 0384 04D04DE2 	HandlerEINT3:	HANDLER HandleEINT3
 176      04002DE5 
 176      84039FE5 
 176      000090E5 
 176      04008DE5 
 177 039c 04D04DE2 	HandlerEINT2:	HANDLER HandleEINT2
 177      04002DE5 
 177      70039FE5 
 177      000090E5 
 177      04008DE5 
 178 03b4 04D04DE2 	HandlerEINT1:	HANDLER HandleEINT1
 178      04002DE5 
 178      5C039FE5 
 178      000090E5 
 178      04008DE5 
 179 03cc 04D04DE2 	HandlerEINT0:	HANDLER HandleEINT0
 179      04002DE5 
 179      48039FE5 
 179      000090E5 
 179      04008DE5 
 180              	
 181              	#One of the following two routines can be used for non-vectored interrupt.
 182              	
 183              	IsrIRQ:						/* using I_ISPR register. */
 184 03e4 04D04DE2 	    sub	    sp,sp,#4       	/* reserved for PC	  */
 185 03e8 00032DE9 	    stmfd   sp!,{r8-r9}
 186              	
 187 03ec 4000A0E3 	    mov r0, #IRQ_MODE		/* Llamamos a push debug poniendo los parametros */
 188 03f0 0010A0E3 	    mov r1, #0
 189 03f4 FEFFFFEB 	    BL push_debug
 190              	
 191              	#IMPORTANT CAUTION
 192              	# when I_ISPC isn't used properly, I_ISPR can be 0 in this routine.
 193              	
 194 03f8 28939FE5 	    ldr	    r9,=I_ISPR
 195 03fc 009099E5 	    ldr	    r9,[r9]
 196              	
 197 0400 000059E3 		cmp		r9, #0x0		/* If the IDLE mode work-around is used, 	*/
 198              								/* r9 may be 0 sometimes.			*/
 199 0404 0900000A 		beq		l2
 200              	
 201 0408 0080A0E3 	    mov	    r8,#0x0
 202              	l0:
 203 040c A990B0E1 	    movs    r9,r9,lsr #1
 204 0410 0100002A 	    bcs	    l1
 205 0414 048088E2 	    add	    r8,r8,#4
 206 0418 FBFFFFEA 	    b	    l0
 207              	
 208              	l1:
 209 041c 9C929FE5 	    ldr	    r9,=HandleADC
 210 0420 089089E0 	    add	    r9,r9,r8
 211 0424 009099E5 	    ldr	    r9,[r9]
 212 0428 08908DE5 	    str	    r9,[sp,#8]
 213 042c 0083BDE8 	    ldmfd   sp!,{r8-r9,pc}
 214              	
 215              	l2:
 216 0430 0003BDE8 		ldmfd	sp!,{r8-r9}
 217 0434 04D08DE2 		add		sp,sp,#4
 218 0438 04F05EE2 		subs	pc,lr,#4
 219              	
 220              	#****************************************************
 221              	#*	START											*
 222              	#****************************************************
 223              	ResetHandler:
 224 043c E8029FE5 	    ldr	    r0,=WTCON	    	/* watch dog disable*/
 225 0440 0010A0E3 	    ldr	    r1,=0x0 		
 226 0444 001080E5 	    str	    r1,[r0]
 227              	
 228 0448 E0029FE5 	    ldr	    r0,=INTMSK
 229 044c 3E13E0E3 	    ldr	    r1,=0x07ffffff  	/* all interrupt disable */
 230 0450 001080E5 	    str	    r1,[r0]
 231              	
 232              	  
 233              	
 234              	    #****************************************************
 235              	    #*	Set clock control registers						*
 236              	    #****************************************************
 237 0454 D8029FE5 	    ldr		r0,=LOCKTIME
 238 0458 D8129FE5 	    ldr		r1,=0xfff
 239 045c 001080E5 	    str		r1,[r0]
 240              	
 241              	.if PLLONSTART
 242 0460 7607A0E3 		ldr		r0,=PLLCON			/* temporary setting of PLL */
 243 0464 D0129FE5 		ldr		r1,=((M_DIV<<12)+(P_DIV<<4)+S_DIV)	/* Fin=8MHz,Fout=64MHz     */
 244 0468 001080E5 		str		r1,[r0]
 245              	.endif
 246              	
 247 046c CC029FE5 	    ldr	    r0,=CLKCON		
 248 0470 CC129FE5 	    ldr	    r1,=0x7ff8	    	/* All unit block CLK enable */
 249 0474 001080E5 	    str	    r1,[r0]
 250              	
 251              	    #****************************************
 252              	    #*  change BDMACON reset value for BDMA *   
 253              	    #****************************************
 254 0478 C8029FE5 	    ldr     r0,=BDIDES0      
 255 047c 0111A0E3 	    ldr     r1,=0x40000000   	/* BDIDESn reset value should be 0x40000000 */
 256 0480 001080E5 	    str     r1,[r0]
 257              	
 258 0484 C0029FE5 	    ldr     r0,=BDIDES1      
 259 0488 0111A0E3 	    ldr     r1,=0x40000000   	/* BDIDESn reset value should be 0x40000000 */	 
 260 048c 001080E5 	    str     r1,[r0]
 261              	
 262              		#****************************************************
 263              	    #*	Set memory control registers					*
 264              	    #****************************************************
 265 0490 B8029FE5 	    ldr	    r0,=(SMRDATA-0xc000000)
 266 0494 FE3F90E8 	    ldmia   r0,{r1-r13}
 267 0498 7207A0E3 	    ldr	    r0,=0x01c80000  	/* BWSCON Address */
 268 049c FE3F80E8 	    stmia   r0,{r1-r13}
 269              		
 270 04a0 0000A0E3 		LDR r0,=0x0
 271 04a4 A8129FE5 		LDR r1,=Image_RO_Base
 272 04a8 A8329FE5 		LDR r3,=Image_ZI_Limit
 273              	LoopRw:
 274 04ac 030051E1 		    cmp         r1, r3
 275 04b0 04209034 			ldrcc       r2, [r0], #4
 276 04b4 04208134 			strcc       r2, [r1], #4
 277 04b8 FBFFFF3A 			bcc         LoopRw
 278              			
 279 04bc 0030A0E3 		mov r3, #0
 280 04c0 94029FE5 		LDR r0, =Image_ZI_Base
 281 04c4 8C129FE5 		LDR r1, =Image_ZI_Limit
 282              	LoopZI:
 283 04c8 010050E1 		cmp r0, r1
 284 04cc 04308034 		strcc r3, [r0], #4
 285 04d0 FCFFFF3A 		bcc LoopZI
 286              	
 287              	    #;****************************************************
 288              	    #;*	Initialize stacks								* 
 289              	    #;****************************************************
 290 04d4 84D29FE5 	    ldr	    sp, =SVCStack		/* Why	*/		
 291 04d8 2F0000EB 	    bl	    InitStacks
 292              	
 293              	    #;****************************************************
 294              	    #;*	Setup IRQ handler								*
 295              	    #;****************************************************
 296              	    .extern exception
 297              	
 298 04dc CC019FE5 	    ldr	    r0,=HandleUndef		/* This routine is needed */
 299 04e0 7C129FE5 	    ldr	    r1,=exception			/* if there isn't 'subs pc,lr,#4' at 0x18, 0x1c */
 300 04e4 001080E5 	    str	    r1,[r0]
 301              	
 302 04e8 C4019FE5 	    ldr	    r0,=HandleSWI		/* This routine is needed */
 303 04ec 70129FE5 	    ldr	    r1,=exception			/* if there isn't 'subs pc,lr,#4' at 0x18, 0x1c */
 304 04f0 001080E5 	    str	    r1,[r0]
 305              	
 306 04f4 C0019FE5 	    ldr	    r0,=HandlePabort		/* This routine is needed */
 307 04f8 64129FE5 	    ldr	    r1,=exception			/* if there isn't 'subs pc,lr,#4' at 0x18, 0x1c */
 308 04fc 001080E5 	    str	    r1,[r0]
 309              	
 310 0500 B0019FE5 	    ldr	    r0,=HandleDabort		/* This routine is needed */
 311 0504 58129FE5 	    ldr	    r1,=exception			/* if there isn't 'subs pc,lr,#4' at 0x18, 0x1c */
 312 0508 001080E5 	    str	    r1,[r0]
 313              	
 314 050c 54029FE5 	    ldr	    r0,=HandleReserved		/* This routine is needed */
 315 0510 4C129FE5 	    ldr	    r1,=exception			/* if there isn't 'subs pc,lr,#4' at 0x18, 0x1c */
 316 0514 001080E5 	    str	    r1,[r0]
 317              	
 318 0518 8C019FE5 	    ldr	    r0,=HandleIRQ		/* This routine is needed */
 319 051c 48129FE5 	    ldr	    r1,=IsrIRQ			/* if there isn't 'subs pc,lr,#4' at 0x18, 0x1c */
 320 0520 001080E5 	    str	    r1,[r0]
 321              	
 322 0524 7C019FE5 	    ldr	    r0,=HandleFIQ		/* This routine is needed */
 323 0528 34129FE5 	    ldr	    r1,=exception			/* if there isn't 'subs pc,lr,#4' at 0x18, 0x1c */
 324 052c 001080E5 	    str	    r1,[r0]
 325              	    
 326              		
 327              	    
 328              		
 329              		#********************************************************
 330              	    #*	Copy and paste RW data/zero initialized data	    *
 331              	    #********************************************************
 332 0530 38029FE5 	    LDR	    r0, =Image_RO_Limit	/* Get pointer to ROM data */
 333 0534 38129FE5 	    LDR	    r1, =Image_RW_Base	/* and RAM copy	*/
 334 0538 1C329FE5 	    LDR	    r3, =Image_ZI_Base	
 335              	/* Zero init base => top of initialised data */
 336              				
 337 053c 010050E1 	    CMP	    r0, r1	    		/* Check that they are different */
 338 0540 0300000A 	    BEQ	    F1
 339              	F0:
 340 0544 030051E1 	    CMP	    r1, r3				/* Copy init data                        */
 341 0548 04209034 	    LDRCC   r2, [r0], #4        /* --> LDRCC r2, [r0] + ADD r0, r0, #4	 */
 342 054c 04208134 	    STRCC   r2, [r1], #4        /* --> STRCC r2, [r1] + ADD r1, r1, #4   */ 
 343 0550 FBFFFF3A 	    BCC	    F0
 344              	
 345              	   
 346              	
 347              	F1:
 348 0554 FC119FE5 	    LDR	    r1, =Image_ZI_Limit	/* Top of zero init segment */
 349 0558 0020A0E3 	    MOV	    r2, #0
 350              	F2:
 351 055c 010053E1 	    CMP	    r3, r1	    		/* Zero init */
 352 0560 04208334 	    STRCC   r2, [r3], #4
 353 0564 FCFFFF3A 	    BCC	    F2
 354              	
 355 0568 00000FE1 		MRS	r0, CPSR
 356 056c C000C0E3 		BIC	r0, r0, #NOINT /* enable interrupt */
 357 0570 00F02FE1 		MSR	CPSR_cxsf, r0
 358              		/* jump to main() */
 359 0574 FC019FE5 	   	ldr r0,=Main
 360 0578 0FE0A0E1 	    mov lr,pc
 361 057c 00F0A0E1 	    mov pc,r0
 362 0580 FEFFFFEA 	   	B   .	    
 363              	
 364              	exception:
 365              	
 366 0584 00000FE1 		MRS	r0, CPSR
 367 0588 1F0000E2 		and r0, r0, #0x1f
 368              	
 369 058c 04104EE2 		sub r1, lr, #4
 370 0590 FEFFFFEB 		BL push_debug
 371              	
 372 0594 FEFFFFEB 		bl parpadeos
 373              	
 374 0598 FEFFFFEA 		B .
 375              	
 376              	#;****************************************************
 377              	#;*	The function for initializing stack				*
 378              	#;****************************************************
 379              	InitStacks:
 380              		#Don't use DRAM,such as stmfd,ldmfd......
 381              		#SVCstack is initialized before
 382              		#Under toolkit ver 2.50, 'msr cpsr,r1' can be used instead of 'msr cpsr_cxsf,r1'
 383              	
 384 059c 00000FE1 	    mrs	    r0,cpsr
 385 05a0 1F00C0E3 	    bic	    r0,r0,#MODEMASK
 386 05a4 1B1080E3 	    orr	    r1,r0,#UNDEFMODE
 387 05a8 01F02FE1 	    msr	    cpsr_cxsf,r1		/* UndefMode */
 388 05ac C8D19FE5 	    ldr	    sp,=UndefStack
 389              		
 390 05b0 D71080E3 	    orr	    r1,r0,#ABORTMODE|NOINT
 391 05b4 01F02FE1 	    msr	    cpsr_cxsf,r1 	    /* AbortMode */	
 392 05b8 C0D19FE5 	    ldr	    sp,=AbortStack
 393              	
 394 05bc 921080E3 	    orr	    r1,r0,#IRQMODE|FIQ_MODE
 395 05c0 01F02FE1 	    msr	    cpsr_cxsf,r1 	    /* IRQMode */
 396 05c4 B8D19FE5 	    ldr	    sp,=IRQStack
 397              		
 398 05c8 511080E3 	    orr	    r1,r0,#FIQMODE|IRQ_MODE
 399 05cc 01F02FE1 	    msr	    cpsr_cxsf,r1 	    /* FIQMode */
 400 05d0 B0D19FE5 	    ldr	    sp,=FIQStack
 401              	
 402 05d4 1F00C0E3 	    bic	    r0,r0,#MODEMASK
 403 05d8 131080E3 	    orr	    r1,r0,#SVCMODE
 404 05dc 01F02FE1 	    msr	    cpsr_cxsf,r1 	    /* SVCMode */
 405 05e0 78D19FE5 	    ldr	    sp,=SVCStack
 406              	
 407              		#USER mode is not initialized.
 408 05e4 0EF0A0E1 	    mov	    pc,lr 				/* The LR register may be not valid for the mode changes. */
 409              	
 410              	#****************************************************
 411              	#*	The function for entering power down mode		*
 412              	#****************************************************
 413              	#void EnterPWDN(int CLKCON);
 414              	EnterPWDN:
 415 05e8 0020A0E1 	    mov	    r2,r0               /* r0=CLKCON */
 416 05ec 98019FE5 	    ldr	    r0,=REFRESH		
 417 05f0 003090E5 	    ldr	    r3,[r0]
 418 05f4 0310A0E1 	    mov	    r1, r3
 419 05f8 011581E3 	    orr	    r1, r1, #0x400000   /* self-refresh enable */
 420 05fc 001080E5 	    str	    r1, [r0]
 421              	
 422 0600 0000A0E1 	    nop     /* Wait until self-refresh is issued. May not be needed. */
 423 0604 0000A0E1 	    nop     /* If the other bus master holds the bus, ... */
 424 0608 0000A0E1 	    nop	    /* mov r0, r0 */
 425 060c 0000A0E1 	    nop
 426 0610 0000A0E1 	    nop
 427 0614 0000A0E1 	    nop
 428 0618 0000A0E1 	    nop
 429              	
 430              	#enter POWERDN mode
 431 061c 1C019FE5 	    ldr	    r0,=CLKCON
 432 0620 002080E5 	    str	    r2,[r0]
 433              	
 434              	#wait until enter SL_IDLE,STOP mode and until wake-up
 435 0624 1000A0E3 	    ldr	    r0,=0x10
 436 0628 010050E2 	U0: subs    r0,r0,#1
 437 062c FDFFFF1A 	    bne	    U0
 438              	
 439              	#exit from DRAM/SDRAM self refresh mode.
 440 0630 54019FE5 	    ldr	    r0,=REFRESH
 441 0634 003080E5 	    str	    r3,[r0]
 442 0638 0EF0A0E1 	    mov	    pc,lr
 443              	    
 444 063c CC030000 	    .ltorg
 444      B4030000 
 444      9C030000 
 444      84030000 
 444      6C030000 
 445              	
 446              	
 447              	#*****************************************************************
 448              	#* Memory configuration has to be optimized for best performance *
 449              	#* The following parameter is not optimized.                     *
 450              	#*****************************************************************
 451              	
 452              	#*** memory access cycle parameter strategy ***
 453              	# 1) Even FP-DRAM, EDO setting has more late fetch point by half-clock
 454              	# 2) The memory settings,here, are made the safe parameters even at 66Mhz.
 455              	# 3) FP-DRAM Parameters:tRCD=3 for tRAC, tcas=2 for pad delay, tcp=2 for bus load.
 456              	# 4) DRAM refresh rate is for 40Mhz. 
 457              	
 458              	#bank0	16bit BOOT ROM
 459              	#bank1	NandFlash(8bit)/IDE/USB/rtl8019as/LCD
 460              	#bank2	No use 
 461              	#bank3	Keyboard 
 462              	#bank4	No use
 463              	#bank5	No use
 464              	#bank6	16bit SDRAM
 465              	#bank7	No use
 466              	
 467              	.ifeq BUSWIDTH-16
 468 0790 02011111 		.long 0x11110102		/* Bank0=16bit BootRom(AT29C010A*2) :0x0 */
 469              	.else
 470              	   	.long 0x22222220		/* Bank0=OM[1:0], Bank1~Bank7=32bit 	 */
 471              	.endif
 472 0794 00060000 		.long ((B0_Tacs<<13)+(B0_Tcos<<11)+(B0_Tacc<<8)+(B0_Tcoh<<6)+(B0_Tah<<4)+(B0_Tacp<<2)+(B0_PMC))	/*
 473 0798 FC7F0000 		.long ((B1_Tacs<<13)+(B1_Tcos<<11)+(B1_Tacc<<8)+(B1_Tcoh<<6)+(B1_Tah<<4)+(B1_Tacp<<2)+(B1_PMC))	/*
 474 079c FC7F0000 		.long ((B2_Tacs<<13)+(B2_Tcos<<11)+(B2_Tacc<<8)+(B2_Tcoh<<6)+(B2_Tah<<4)+(B2_Tacp<<2)+(B2_PMC))	/*
 475 07a0 FC7F0000 		.long ((B3_Tacs<<13)+(B3_Tcos<<11)+(B3_Tacc<<8)+(B3_Tcoh<<6)+(B3_Tah<<4)+(B3_Tacp<<2)+(B3_PMC))	/*
 476 07a4 FC7F0000 		.long ((B4_Tacs<<13)+(B4_Tcos<<11)+(B4_Tacc<<8)+(B4_Tcoh<<6)+(B4_Tah<<4)+(B4_Tacp<<2)+(B4_PMC))	/*
 477 07a8 FC7F0000 		.long ((B5_Tacs<<13)+(B5_Tcos<<11)+(B5_Tacc<<8)+(B5_Tcoh<<6)+(B5_Tah<<4)+(B5_Tacp<<2)+(B5_PMC))	/*
 478              		.ifc "DRAM",BDRAMTYPE
 479              		    .long ((B6_MT<<15)+(B6_Trcd<<4)+(B6_Tcas<<3)+(B6_Tcp<<2)+(B6_CAN))	/* GCS6 check the MT value 
 480              		    .long ((B7_MT<<15)+(B7_Trcd<<4)+(B7_Tcas<<3)+(B7_Tcp<<2)+(B7_CAN))	/* GCS7                    
 481              		.else
 482 07ac 00800100 			.long ((B6_MT<<15)+(B6_Trcd<<2)+(B6_SCAN))	/* GCS6 */
 483 07b0 00800100 			.long ((B7_MT<<15)+(B7_Trcd<<2)+(B7_SCAN))	/* GCS7 */
 484              		.endif
 485 07b4 59048600 		.long ((REFEN<<23)+(TREFMD<<22)+(Trp<<20)+(Trc<<18)+(Tchr<<16)+REFCNT)	/* REFRESH RFEN=1, TREFMD=0
 486 07b8 10000000 		.long 0x10				/* SCLK power down mode, BANKSIZE 32M/32M */
 487 07bc 20000000 		.long 0x20				/* MRSR6 CL=2clk                          */
 488 07c0 20000000 		.long 0x20				/* MRSR7                                  */
 489              	
 490              	
 491              	.equ 	UserStack,	_ISR_STARTADDRESS-0xf00    		/* c7ff000 */   	
 492              	.equ	SVCStack,	_ISR_STARTADDRESS-0xf00+256    	/* c7ff100 */
 493              	.equ	UndefStack,	_ISR_STARTADDRESS-0xf00+256*2   /* c7ff200 */
 494              	.equ	AbortStack,	_ISR_STARTADDRESS-0xf00+256*3   /* c7ff300 */
 495              	.equ	IRQStack,	_ISR_STARTADDRESS-0xf00+256*4   /* c7ff400 */
 496              	.equ	FIQStack,	_ISR_STARTADDRESS-0xf00+256*5   /* c7ff500 */
 497              	
 498              	.equ	HandleReset,	_ISR_STARTADDRESS
 499              	.equ	HandleUndef,	_ISR_STARTADDRESS+4
 500              	.equ	HandleSWI,		_ISR_STARTADDRESS+4*2
 501              	.equ	HandlePabort,	_ISR_STARTADDRESS+4*3
 502              	.equ	HandleDabort,	_ISR_STARTADDRESS+4*4
 503              	.equ	HandleReserved,	_ISR_STARTADDRESS+4*5
 504              	.equ	HandleIRQ,		_ISR_STARTADDRESS+4*6
 505              	.equ	HandleFIQ,		_ISR_STARTADDRESS+4*7
 506              	
 507              	#Don't use the label 'IntVectorTable',
 508              	#because armasm.exe cann't recognize this label correctly.
 509              	#the value is different with an address you think it may be.
 510              	#IntVectorTable
 511              	.equ	HandleADC,    	_ISR_STARTADDRESS+4*8
 512              	.equ	HandleRTC,		_ISR_STARTADDRESS+4*9
 513              	.equ	HandleUTXD1, 	_ISR_STARTADDRESS+4*10
 514              	.equ	HandleUTXD0,	_ISR_STARTADDRESS+4*11
 515              	.equ	HandleSIO,		_ISR_STARTADDRESS+4*12
 516              	.equ	HandleIIC,		_ISR_STARTADDRESS+4*13
 517              	.equ	HandleURXD1,	_ISR_STARTADDRESS+4*14
 518              	.equ	HandleURXD0,	_ISR_STARTADDRESS+4*15
 519              	.equ	HandleTIMER5,	_ISR_STARTADDRESS+4*16
 520              	.equ	HandleTIMER4,	_ISR_STARTADDRESS+4*17
 521              	.equ	HandleTIMER3,	_ISR_STARTADDRESS+4*18
 522              	.equ	HandleTIMER2,	_ISR_STARTADDRESS+4*19
 523              	.equ	HandleTIMER1,	_ISR_STARTADDRESS+4*20
 524              	.equ	HandleTIMER0,	_ISR_STARTADDRESS+4*21
 525              	.equ	HandleUERR01,	_ISR_STARTADDRESS+4*22
 526              	.equ	HandleWDT,		_ISR_STARTADDRESS+4*23
 527              	.equ	HandleBDMA1, 	_ISR_STARTADDRESS+4*24
 528              	.equ	HandleBDMA0,	_ISR_STARTADDRESS+4*25
 529              	.equ	HandleZDMA1, 	_ISR_STARTADDRESS+4*26
 530              	.equ	HandleZDMA0,	_ISR_STARTADDRESS+4*27
 531              	.equ	HandleTICK,		_ISR_STARTADDRESS+4*28
 532              	.equ	HandleEINT4567,	_ISR_STARTADDRESS+4*29
 533              	.equ	HandleEINT3,	_ISR_STARTADDRESS+4*30
 534              	.equ	HandleEINT2,	_ISR_STARTADDRESS+4*31
 535              	.equ	HandleEINT1,	_ISR_STARTADDRESS+4*32
 536              	.equ	HandleEINT0,	_ISR_STARTADDRESS+4*33		/* 0xc1(c7)fff84 */
 537              	
 538              	// Añadido Ph
 539              	SMRDATA:
 540 07c4 02011111 		.word 0x11110102	@ BWSCON
 541 07c8 00060000 		.word 0x00000600	@ BANKCON0
 542 07cc FC7F0000 		.word 0x00007FFC	@ BANKCON1
 543 07d0 FC7F0000 		.word 0x00007FFC	@ BANKCON2
 544 07d4 FC7F0000 		.word 0x00007FFC	@ BANKCON3
 545 07d8 FC7F0000 		.word 0x00007FFC	@ BANKCON4
 546 07dc FC7F0000 		.word 0x00007FFC	@ BANKCON5
 547 07e0 00800100 		.word 0x00018000	@ BANKCON6
 548 07e4 00800100 		.word 0x00018000	@ BANKCON7
 549 07e8 59048600 		.word 0x00860459	@ REFRESH
 550 07ec 10000000 		.word 0x00000010	@ BANKSIZE
 551 07f0 20000000 		.word 0x00000020	@ MRSRB6
 552 07f4 20000000 		.word 0x00000020	@ MRSRB7
 553              			.end
DEFINED SYMBOLS
Z:\Php2\Practica2\common/option.a:9      *ABS*:0c7fff00 _ISR_STARTADDRESS
                            *ABS*:00000010 BUSWIDTH
Z:\Php2\Practica2\common/option.a:17     .data:00000000 BDRAMTYPE
                            *ABS*:00000001 PLLONSTART
                            *ABS*:03d09000 PLLCLK
Z:\Php2\Practica2\common/option.a:28     *ABS*:00000038 M_DIV
Z:\Php2\Practica2\common/option.a:29     *ABS*:00000002 P_DIV
Z:\Php2\Practica2\common/option.a:30     *ABS*:00000001 S_DIV
Z:\Php2\Practica2\common/memcfg.a:11     *ABS*:00000000 B0_Tacs
Z:\Php2\Practica2\common/memcfg.a:12     *ABS*:00000000 B0_Tcos
Z:\Php2\Practica2\common/memcfg.a:13     *ABS*:00000006 B0_Tacc
Z:\Php2\Practica2\common/memcfg.a:14     *ABS*:00000000 B0_Tcoh
Z:\Php2\Practica2\common/memcfg.a:15     *ABS*:00000000 B0_Tah
Z:\Php2\Practica2\common/memcfg.a:16     *ABS*:00000000 B0_Tacp
Z:\Php2\Practica2\common/memcfg.a:17     *ABS*:00000000 B0_PMC
Z:\Php2\Practica2\common/memcfg.a:20     *ABS*:00000003 B1_Tacs
Z:\Php2\Practica2\common/memcfg.a:21     *ABS*:00000003 B1_Tcos
Z:\Php2\Practica2\common/memcfg.a:22     *ABS*:00000007 B1_Tacc
Z:\Php2\Practica2\common/memcfg.a:23     *ABS*:00000003 B1_Tcoh
Z:\Php2\Practica2\common/memcfg.a:24     *ABS*:00000003 B1_Tah
Z:\Php2\Practica2\common/memcfg.a:25     *ABS*:00000003 B1_Tacp
Z:\Php2\Practica2\common/memcfg.a:26     *ABS*:00000000 B1_PMC
Z:\Php2\Practica2\common/memcfg.a:29     *ABS*:00000003 B2_Tacs
Z:\Php2\Practica2\common/memcfg.a:30     *ABS*:00000003 B2_Tcos
Z:\Php2\Practica2\common/memcfg.a:31     *ABS*:00000007 B2_Tacc
Z:\Php2\Practica2\common/memcfg.a:32     *ABS*:00000003 B2_Tcoh
Z:\Php2\Practica2\common/memcfg.a:33     *ABS*:00000003 B2_Tah
Z:\Php2\Practica2\common/memcfg.a:34     *ABS*:00000003 B2_Tacp
Z:\Php2\Practica2\common/memcfg.a:35     *ABS*:00000000 B2_PMC
Z:\Php2\Practica2\common/memcfg.a:38     *ABS*:00000003 B3_Tacs
Z:\Php2\Practica2\common/memcfg.a:39     *ABS*:00000003 B3_Tcos
Z:\Php2\Practica2\common/memcfg.a:40     *ABS*:00000007 B3_Tacc
Z:\Php2\Practica2\common/memcfg.a:41     *ABS*:00000003 B3_Tcoh
Z:\Php2\Practica2\common/memcfg.a:42     *ABS*:00000003 B3_Tah
Z:\Php2\Practica2\common/memcfg.a:43     *ABS*:00000003 B3_Tacp
Z:\Php2\Practica2\common/memcfg.a:44     *ABS*:00000000 B3_PMC
Z:\Php2\Practica2\common/memcfg.a:47     *ABS*:00000003 B4_Tacs
Z:\Php2\Practica2\common/memcfg.a:48     *ABS*:00000003 B4_Tcos
Z:\Php2\Practica2\common/memcfg.a:49     *ABS*:00000007 B4_Tacc
Z:\Php2\Practica2\common/memcfg.a:50     *ABS*:00000003 B4_Tcoh
Z:\Php2\Practica2\common/memcfg.a:51     *ABS*:00000003 B4_Tah
Z:\Php2\Practica2\common/memcfg.a:52     *ABS*:00000003 B4_Tacp
Z:\Php2\Practica2\common/memcfg.a:53     *ABS*:00000000 B4_PMC
Z:\Php2\Practica2\common/memcfg.a:56     *ABS*:00000003 B5_Tacs
Z:\Php2\Practica2\common/memcfg.a:57     *ABS*:00000003 B5_Tcos
Z:\Php2\Practica2\common/memcfg.a:58     *ABS*:00000007 B5_Tacc
Z:\Php2\Practica2\common/memcfg.a:59     *ABS*:00000003 B5_Tcoh
Z:\Php2\Practica2\common/memcfg.a:60     *ABS*:00000003 B5_Tah
Z:\Php2\Practica2\common/memcfg.a:61     *ABS*:00000003 B5_Tacp
Z:\Php2\Practica2\common/memcfg.a:62     *ABS*:00000000 B5_PMC
Z:\Php2\Practica2\common/memcfg.a:65     *ABS*:00000003 B6_Tacs
Z:\Php2\Practica2\common/memcfg.a:66     *ABS*:00000003 B6_Tcos
Z:\Php2\Practica2\common/memcfg.a:67     *ABS*:00000007 B6_Tacc
Z:\Php2\Practica2\common/memcfg.a:68     *ABS*:00000003 B6_Tcoh
Z:\Php2\Practica2\common/memcfg.a:69     *ABS*:00000003 B6_Tah
Z:\Php2\Practica2\common/memcfg.a:70     *ABS*:00000003 B6_Tacp
Z:\Php2\Practica2\common/memcfg.a:71     *ABS*:00000000 B6_PMC
Z:\Php2\Practica2\common/memcfg.a:74     *ABS*:00000003 B7_Tacs
Z:\Php2\Practica2\common/memcfg.a:75     *ABS*:00000003 B7_Tcos
Z:\Php2\Practica2\common/memcfg.a:76     *ABS*:00000007 B7_Tacc
Z:\Php2\Practica2\common/memcfg.a:77     *ABS*:00000003 B7_Tcoh
Z:\Php2\Practica2\common/memcfg.a:78     *ABS*:00000003 B7_Tah
Z:\Php2\Practica2\common/memcfg.a:79     *ABS*:00000003 B7_Tacp
Z:\Php2\Practica2\common/memcfg.a:80     *ABS*:00000000 B7_PMC
Z:\Php2\Practica2\common/memcfg.a:90     *ABS*:00000003 B6_MT
Z:\Php2\Practica2\common/memcfg.a:91     *ABS*:00000000 B6_Trcd
Z:\Php2\Practica2\common/memcfg.a:92     *ABS*:00000000 B6_SCAN
Z:\Php2\Practica2\common/memcfg.a:103    *ABS*:00000003 B7_MT
Z:\Php2\Practica2\common/memcfg.a:104    *ABS*:00000000 B7_Trcd
Z:\Php2\Practica2\common/memcfg.a:105    *ABS*:00000000 B7_SCAN
Z:\Php2\Practica2\common/memcfg.a:109    *ABS*:00000001 REFEN
Z:\Php2\Practica2\common/memcfg.a:110    *ABS*:00000000 TREFMD
Z:\Php2\Practica2\common/memcfg.a:111    *ABS*:00000000 Trp
Z:\Php2\Practica2\common/memcfg.a:112    *ABS*:00000001 Trc
Z:\Php2\Practica2\common/memcfg.a:113    *ABS*:00000002 Tchr
Z:\Php2\Practica2\common/memcfg.a:114    *ABS*:00000459 REFCNT
../common/44binit.asm:21     *ABS*:01e00004 INTPND
../common/44binit.asm:22     *ABS*:01e00008 INTMOD
../common/44binit.asm:23     *ABS*:01e0000c INTMSK
../common/44binit.asm:24     *ABS*:01e00020 I_ISPR
../common/44binit.asm:25     *ABS*:01e0001c I_CMST
../common/44binit.asm:28     *ABS*:01d30000 WTCON
../common/44binit.asm:31     *ABS*:01d80000 PLLCON
../common/44binit.asm:32     *ABS*:01d80004 CLKCON
../common/44binit.asm:33     *ABS*:01d8000c LOCKTIME
../common/44binit.asm:36     *ABS*:01c80024 REFRESH
../common/44binit.asm:39     *ABS*:01f80008 BDIDES0
../common/44binit.asm:40     *ABS*:01f80028 BDIDES1
../common/44binit.asm:43     *ABS*:00000010 USERMODE
../common/44binit.asm:44     *ABS*:00000011 FIQMODE
../common/44binit.asm:45     *ABS*:00000012 IRQMODE
../common/44binit.asm:46     *ABS*:00000013 SVCMODE
../common/44binit.asm:47     *ABS*:00000017 ABORTMODE
../common/44binit.asm:48     *ABS*:0000001b UNDEFMODE
../common/44binit.asm:49     *ABS*:0000001f MODEMASK
../common/44binit.asm:50     *ABS*:000000c0 NOINT
../common/44binit.asm:51     *ABS*:00000040 IRQ_MODE
../common/44binit.asm:52     *ABS*:00000080 FIQ_MODE
../common/44binit.asm:74     .text:00000000 ENTRY
../common/44binit.asm:223    .text:0000043c ResetHandler
../common/44binit.asm:75     .text:00000000 $a
../common/44binit.asm:150    .text:00000114 HandlerUndef
../common/44binit.asm:151    .text:0000012c HandlerSWI
../common/44binit.asm:153    .text:0000015c HandlerPabort
../common/44binit.asm:152    .text:00000144 HandlerDabort
../common/44binit.asm:149    .text:000000fc HandlerIRQ
../common/44binit.asm:148    .text:000000e4 HandlerFIQ
../common/44binit.asm:89     .text:00000020 VECTOR_BRANCH
../common/44binit.asm:179    .text:000003cc HandlerEINT0
../common/44binit.asm:178    .text:000003b4 HandlerEINT1
../common/44binit.asm:177    .text:0000039c HandlerEINT2
../common/44binit.asm:176    .text:00000384 HandlerEINT3
../common/44binit.asm:175    .text:0000036c HandlerEINT4567
../common/44binit.asm:174    .text:00000354 HandlerTICK
../common/44binit.asm:173    .text:0000033c HandlerZDMA0
../common/44binit.asm:172    .text:00000324 HandlerZDMA1
../common/44binit.asm:171    .text:0000030c HandlerBDMA0
../common/44binit.asm:170    .text:000002f4 HandlerBDMA1
../common/44binit.asm:169    .text:000002dc HandlerWDT
../common/44binit.asm:168    .text:000002c4 HandlerUERR01
../common/44binit.asm:167    .text:000002ac HandlerTIMER0
../common/44binit.asm:166    .text:00000294 HandlerTIMER1
../common/44binit.asm:165    .text:0000027c HandlerTIMER2
../common/44binit.asm:164    .text:00000264 HandlerTIMER3
../common/44binit.asm:163    .text:0000024c HandlerTIMER4
../common/44binit.asm:162    .text:00000234 HandlerTIMER5
../common/44binit.asm:161    .text:0000021c HandlerURXD0
../common/44binit.asm:160    .text:00000204 HandlerURXD1
../common/44binit.asm:159    .text:000001ec HandlerIIC
../common/44binit.asm:158    .text:000001d4 HandlerSIO
../common/44binit.asm:157    .text:000001bc HandlerUTXD0
../common/44binit.asm:156    .text:000001a4 HandlerUTXD1
../common/44binit.asm:155    .text:0000018c HandlerRTC
../common/44binit.asm:154    .text:00000174 HandlerADC
../common/44binit.asm:414    .text:000005e8 EnterPWDN
                            *ABS*:0c7fff1c HandleFIQ
                            *ABS*:0c7fff18 HandleIRQ
                            *ABS*:0c7fff04 HandleUndef
                            *ABS*:0c7fff08 HandleSWI
                            *ABS*:0c7fff10 HandleDabort
                            *ABS*:0c7fff0c HandlePabort
                            *ABS*:0c7fff20 HandleADC
                            *ABS*:0c7fff24 HandleRTC
                            *ABS*:0c7fff28 HandleUTXD1
                            *ABS*:0c7fff2c HandleUTXD0
                            *ABS*:0c7fff30 HandleSIO
                            *ABS*:0c7fff34 HandleIIC
                            *ABS*:0c7fff38 HandleURXD1
                            *ABS*:0c7fff3c HandleURXD0
                            *ABS*:0c7fff40 HandleTIMER5
                            *ABS*:0c7fff44 HandleTIMER4
                            *ABS*:0c7fff48 HandleTIMER3
                            *ABS*:0c7fff4c HandleTIMER2
                            *ABS*:0c7fff50 HandleTIMER1
                            *ABS*:0c7fff54 HandleTIMER0
                            *ABS*:0c7fff58 HandleUERR01
                            *ABS*:0c7fff5c HandleWDT
                            *ABS*:0c7fff60 HandleBDMA1
                            *ABS*:0c7fff64 HandleBDMA0
                            *ABS*:0c7fff68 HandleZDMA1
                            *ABS*:0c7fff6c HandleZDMA0
                            *ABS*:0c7fff70 HandleTICK
                            *ABS*:0c7fff74 HandleEINT4567
                            *ABS*:0c7fff78 HandleEINT3
                            *ABS*:0c7fff7c HandleEINT2
                            *ABS*:0c7fff80 HandleEINT1
                            *ABS*:0c7fff84 HandleEINT0
../common/44binit.asm:183    .text:000003e4 IsrIRQ
../common/44binit.asm:215    .text:00000430 l2
../common/44binit.asm:202    .text:0000040c l0
../common/44binit.asm:208    .text:0000041c l1
../common/44binit.asm:539    .text:000007c4 SMRDATA
../common/44binit.asm:273    .text:000004ac LoopRw
../common/44binit.asm:282    .text:000004c8 LoopZI
                            *ABS*:0c7ff100 SVCStack
../common/44binit.asm:379    .text:0000059c InitStacks
../common/44binit.asm:364    .text:00000584 exception
                            *ABS*:0c7fff14 HandleReserved
../common/44binit.asm:347    .text:00000554 F1
../common/44binit.asm:339    .text:00000544 F0
../common/44binit.asm:350    .text:0000055c F2
                            *ABS*:0c7ff200 UndefStack
                            *ABS*:0c7ff300 AbortStack
                            *ABS*:0c7ff400 IRQStack
                            *ABS*:0c7ff500 FIQStack
../common/44binit.asm:436    .text:00000628 U0
../common/44binit.asm:444    .text:0000063c $d
../common/44binit.asm:491    *ABS*:0c7ff000 UserStack
../common/44binit.asm:498    *ABS*:0c7fff00 HandleReset
                   .debug_aranges:0000000c $d

UNDEFINED SYMBOLS
push_debug
Image_RO_Base
Image_ZI_Limit
Image_ZI_Base
Image_RO_Limit
Image_RW_Base
Main
parpadeos
